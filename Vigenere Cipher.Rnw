\documentclass{article}

\begin{document}
<<>>=
# Vignere Cipher.R
library(tm)
message <- "coincidences in general are great stumbling blocks in the way of that class of thinkers who have been educated to know nothing of the theory of probabilities that theory to which the most glorious objects of human research are indebted for the most glorious of illustrations edgar allen poe the murders in the rue morgue morpheus this is your last chance after this there is no turning back you take the blue pill the story ends you wake up in your bed and believe whatever you want to believe you take the red pill you stay in wonderland and i show you how deep the rabbit hole goes"


mat <- read.table("~/Downloads/Archive/AustenCount.txt",header=F)
logmat <- log(mat + 2)

# Computes the score of the decoded message using the given code
#This was updated so that it looks at the length of the code it is given, not just message
vscore <- function(code)
{  
	p <- 0
	# For each pair of letters in the decoded message
	# query the transition matrix for the probability of that pair
	for (i in 1:(nchar(code)-1)){
		p <- p + logmat[charIndex(substr(code, i, i)),charIndex(substr(code, i+1, i+1))]
	}
	# return the sum of these probabilities
	p
}

# ascii(char) returns the numerical ascii value for char
ascii <- function(char)
{ 
	strtoi(charToRaw(char),16L) #get 'raw' ascii value
} 

# charIndex takes in a character and returns its 'char value'
# defined as a=1, b=2, ..., z=26, space=27
# this matches the array created by read.table
charIndex <- function(char)
{
	aValue <- ascii(char)
	if (aValue == 32)
	{
		# return 27 if a space
		27
	} else
	{
		#ascii sets "a" as 97, so subtract 96
		aValue - 96 
	}
}

indexToChar<-function(numeric){
  aValue<- numeric + 96
  if (numeric == 27)
	{
		# return space if a 27
    " "
  }
  else{
  
  rawToChar(as.raw(aValue))
  }
}


#Vigenere encryption function
library(splus2R)
mod1 = function(v, n){
# mod1(1:20, 6)   =>   1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2
    ((v - 1) %% n) + 1
 }
str2ints = function(s){
    as.integer(Filter(Negate(is.na),
        factor(levels = LETTERS, strsplit(toupper(s), "")[[1]])))
}
vigen = function(input, key, decrypt = F)
   {input = str2ints(input)
    key = rep(str2ints(key), len = length(input)) - 1
    paste(collapse = "", LETTERS[
        mod1(input + (if (decrypt) -1 else 1)*key, length(LETTERS))])}

(vigen("Beware the Jabberwock, my son! The jaws that bite, the claws that catch!", "vigenerecipher"))
                
## Example: message(vigen("this is a cipher","vigenerecipher"))

#This encrypts our message
codemess<-tolower(vigen(message,"manu"))

# instantiate a map to hold previously computed codes' scores
map <- new.env(hash=T, parent=emptyenv())

# we begin by generating a 5-letter word at random
holdWord <-(sample(1:26,5))
for(i in 1:length(holdWord)){
  curWord[i]<-indexToChar(holdWord[i])
}
curWord<- paste(curWord,collapse="")
# calculate the score for curFunc and store it in the map
oldScore <- vscore(tolower(vigen(codemess,curWord,decrypt=T)))
map[[paste(curWord, collapse='')]] <- oldScore

# run 7000 iterations of the Metropolis-Hastings algorithm
for (iteration in 1:7000) {
	# sample two letters to swap
	newKey <- sample(1:26,5)

	holdNewWord <-(sample(1:26,5))
for(i in 1:length(holdNewWord)){
  newKey[i]<-indexToChar(holdNewWord[i])
}
	newKey<-paste(newKey, collapse="")
	# if we have already scored this decoding,
	# retrieve score from our map
	if (exists(paste(newKey, collapse =''), map)){
		newScore <- map[[paste(newKey, collapse ='')]]
	} else
	# if we have not already scored this decoding,
	# calculate it and store it in the map
	{
		newScore <- vscore(tolower(vigen(codemess,newKey,decrypt=T)))
		map[[paste(newKey, collapse = '')]] <- newScore
	}
	
	# decide whether to accept curFunc or to revert to oldFunc
	if (runif(1) > exp(newScore-oldScore))
	{
		curWord <- newKey
	} else 
	{
		oldScore <- newScore
	}
	
	# print out our decryption every 100 iterations
	if ((iteration %%  100) == 0)
	{
		print(c(iteration,tolower(vigen(codemess,curWord,decrypt=T))))
	}
}
@
\end{document}